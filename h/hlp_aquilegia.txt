This help file contains most pages of Aquilegia site
You can look at it to see how it is build or use it as a template.
All text before first page is comments and will not be displayed anywhere.
see http://aquilegia.blue
Copyright Pierre ROUZEAU 2016 - documentation license: CC BY-SA 3.0

â– home
Aquilegia, simple web application for documentation
(:date 2 July 2017:)Aquilegia is a pure Javascript software which can deliver on any network a consistent set of documentation pages.
It was originally targeted to be the help system of a web application, but it occurred it could be used for embedded servers.
It is a very lightweight system needing no resource from a server (other than flat serving files), as everything is run in the browser. 
It could be used to build basic utility website targeting only efficiency in information delivery.
Those willing to modify the look may adapt css file, which is  small and easy to tune.

== Functionalities
It is not modular, but basic functionalities are there:
=== Edition
*Easy linking and page structure with simple %markup%aquilegia_syntax
*Automatic table of content building with title anchors, deactivable on demand
*Automatic nesting of sections based upon title level
*Search tool among all pages, with possible page exclusion
*%Collapsible sections%aquilegia_syntax!titles_and_sections as needed, which can be expanded or collapsed at first opening
*Optional side menu with collapsible sections (not presented on small screens).
*%Tabbed presentation%aquilegia_syntax!tabbed_presentation (optional)
*Foot list of web links (link references)
*Footnotes (written inline in the text)
*%Wiki trails%aquilegia_syntax!wiki_trails (jump from page to page according an ordered list)
*Backlinks list
*Auto resize of images larger than viewing window.
*%Deep linking%aquilegia_syntax!deep_linking possible on any page or paragraph in a page and on search.
*Formatting %printed page%aquilegia_syntax!printed_page_header_.27printheader.27
===Documentation Structure
*Text paragraphs %can be hidden%aquilegia_syntax!selected_paragraph based on selector keys, for adaptative documentation
*A page can be included in another page
*Standard %header and footer%aquilegia_syntax!header_page_.27hlphead.27 can be defined
*A set of %directives%aquilegia_syntax!directives for special pages or needs
===Writing 
*Documentation may be written in an unique file, easier to handle for first implementation and for translation.
*New pages can be added as independent text files when documentation is expanding or too large
*Whole site aspect is handled in an unique %css file%css
*A set of %writer tools%% to identify broken links, backlinks, etc. 
*Possibility to use a dedicated %web editor%aquilegia_editor with history tracking on a shared server.
*Managing %images%% and %images metadata%images_list
===Installation
*NO resource required from server other than file serving, no server configuration
*Possible use of remote resources when Internet connection is available

== A demonstration
This presentation is running Aquilegia, but is relatively small (17 pages), so a larger implementation may be seen here:
 "http://otocoup.com/aql". A small demo for tabbed presentation can be seen on "http://aquilegia.blue/tabbed"
520L%aquilegia_tabbed.png 
(:clear:)
==A new tool for web sites?
Surprisingly, while developing a Javascript web application, I did not found any tool to build the help pages associated with this application, running only on browser side.
Having some experience of wikis and considering them as the best tool to build documentation, I decided to use wiki markup for the documentation and designed a working tiny wiki interpreter along search tool.
The system significantly expanded when I decided to run it as the embedded help system of a 3D printer board controller, the "Duet  http://reprap.org/wiki/Duet" and "Duet WiFi https://www.duet3d.com/".
Note that the first web application with the preliminary version of Aquilegia, made in 2014, while totally usable, was never published.

==What documentation size
First implementation had around fifteen short pages, the second implementation (3D printer documentation) is presently 4500 lines and around forty pages, expected to grow to 50-60 pages. For larger page quantity, you can use a tabbed presentation with multiple home pages and menus, one for each tab, each page being attached to a tab. The system will default on the first tab 'home' page. 
This presentation have 15 small pages.

==Another wiki ? No
No, while the system is using  wiki markup, there is no direct possibility for the user to edit the pages (there is no server side functions).
This is not a wiki and it will not evolve to became one. This is a tool designed to serve a relatively static set of documents. But an existing wiki could adopt the same markup. 
Though, to ease shared edition and track history, there is a %separated web editor%aquilegia_editor based on "markitUp!". This editor shall be installed on a php capable web server.

== A new set of wiki mark-ups
The "Wikimatrix site  http://www.wikimatrix.org/statistics.php" list more than one hundred Wiki mark-up variations, so why designing a new one?
All the listed wiki markup in WikiMatrix are completely un-adapted to keyboards which are not English, with no exception. It occurs that as the majority of computer users, I am not using an English keyboard and had to deal with unpractical mark-ups for more than a decade. 
With limited legacy, I decided to design a mark-up more adapted to the world, without adding difficulties for English keyboard users.
For details about my motivations and reasoning, see my take about %Wiki markup%%.
The %syntax used in Aquilegia%aquilegia_syntax.

== On what servers
Anything which can serve web pages with http&#58;// protocol is usable.
You are reading this page on Aquilegia served by a quite standard Apache server with all bells and whistles associated (which are unused except index and 404 pages redirection).
I have run Aquilegia on the smallest embedded web server I know, which is the one integrated in a "3D printer firmware http://reprap.org/wiki/RepRap_Firmware" on a printer control board (the Duet), which get its files from an SD card.
It will be implemented on the same server inside a very-low cost Wifi chip "ESP8266  http://www.esp8266.com/", while the limited memory available on chip (512 kB to 4 MB) may need  control of the whole file set size and reduction of images size. Just have a look on the page about %embedded servers%%

== Resources from a remote site
The server can be configured to get resources (text and images) from a remote web server, while activating shared resources according CORS (on an Apache server, that may be a single line in the .htaccess file). In case of unavailability of the remote resources (no Internet access), the resources will be researched locally.

== Installation
Installation is straightforward, but it needs basic understanding how a server work, see the %installation recommendations%installation

== Integration in web application
It can be integrated easily in a Javascript framework.
The choice of full screen is linked to the difficulties to manage modal boxes on mobile equipment, as the device is lost when zooming between the underlying page and the modal page.
On the Duet printer board, it is integrated in the printer web interface built with bootstrap. However, the system does not use any Bootstrap resources (it was, but that was removed).
JQuery is yet needed for operation.

== Edition
There is no integrated editor, so for development you shall use an external editor or preferably install the %aquilegia editor%% for shared development with history tracking. Use grammar correction. If using an external editor, swapping quickly between the browser view and your editor need %to be organised%edition.

== Performance
The interpretation time is too short to be noticeable by the user, so the overall performance depends from the server speed and the file sizes. See %performance page%speed.

== Serving many users ?
It is a pretty standard web application, so If the web server can serve multiple users, the application can. Not all embedded servers may be capable to serve multiple users. 

== Internationalisation
Accented letters for common European languages is accepted for page names, but the present implementation of the wiki mark-up is not adapted to languages using other alphabet than latin. You can use most characters for text of links.
All system strings are handled by a function (T(string)), so you may create a set of translated strings.

== Licenses
What you write with Aquilegia remain your entire property and you retain all your rights.  
Usage is free for everyone own work.
However, if you redistribute Aquilegia and its documentation, you have to comply with its licenses, see next paragraph.
Notably, you can only redistribute if it is not integrated in another ensemble or if the ensemble have same licenses (GPL for program and CC BY-SA for the documentation). Source code free distribution and crediting author is compulsory.

== Where to find it
It is published on "my GitHub account https://github.com/PRouzeau/Aquilegia". 
I have designed a very basic tool for conversion from Wikimedia markup to Aquilegia markup, which was used to build the Duet documentation set, but it need some polishing and still have a few conversion problems.

== Advices
A few %writer advices%% 
  
== About
Program and documentation (c) Pierre ROUZEAU  - My site  http://rouzeau.net   Not many things about software, anyway
My Github account https://github.com/PRouzeau A bit more software, but mainly hardware about 3D printing
Program licence program: "GPLv2 http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" or any later version - documentation: CC BY-SA 3.0

%Credits%%

**Developer comments**
I am not a professional programmer, but I anyway have comments, recommendations and rants to be vented.
%My developer notes%developer_notes. You may also want to know how I choose %the name%name

â– hlpdef
Default page - added at top of page below page title - this title will never be displayed - use for comments
(:date 21 Aug 2016 14:18:)(:numtitle:)(:hlpfoot:)  56%%mylogo.jpg

â– hlpfoot
Foot page add text at the bottom of the page, outside the title sections, inside page css class. 
(:date 5 Sep 2016 16:50:)<br><small>&copy;2016 Pierre ROUZEAU, except where credited. Licence CC BY-SA 3.0</small>  <a href="javascript:window.showHlp('privacy');">Privacy</a>  <div class="hlpsign">delivered by <a href="http://aquilegia.blue">Aquilegia</a><div>

â– credits
Credits
(:date 21 Aug 2016 14:18:)This program was started from a blank page, but I have to give some credits:
*Icons from "Typicons http://www.typicons.com" licensed under CC-BY-SA
*It is (yet) using "JQuery library https://jquery.com/"
Program and wiki markup designed from scratch but I get infos and inspiration from:
*Directives inspired from "pmwiki http://www.pmwiki.org/"
*Layout inspired from "Wikipedia https://wikipedia.org/"
*A lot of help for details from "Stackoverflow http://stackoverflow.com/"
*A very useful Regex simulator "Regex101 https://regex101.com/"
*Photo "Wikimedia Commons https://commons.wikimedia.org/wiki/File:2008_05_10_FR_Alpes_Revel_AncolieCommune_AquilegiaVulgaris.jpg"

â– images_list
List to store images metadata
(:date 5 Sep 2016 15:55:)See the general page about %images%%.
A file named "imglist.txt" shall be written to store all images descriptions, licences, author and instructions.
The beginning of this file (page) starts with directive (&#58;nosearch:), to not be visited by the search engine. 
The presence of this file is compulsory to link to large images. 
You can write anything before the first image (detected by its file extension).
You shall fill the default values in fictive 'default.png' image. 
This file can be edited by %Aquilegia editor %aquilegia_editor.

You shall have for each image:
*its name (including sub-directory as needed), typically myimage.png or sub/myimage.jpg, without quotes
*A text describing the content, which can be on multiple lines (they will be concatenated). The text CANNOT contain comma ',' or colon ':'.
*Then the fields 'fieldname: field content' in any order, separated by line feeds OR commas
auth:author , copyright:copyright holder (if different from author)
desc: short description, if different from the long description
licence: one or multiple licences, use semi-colon for separation, not commas
instructions: If owner do have specific requests, address, etc.
fields can contain ':' chars after the first one (for web addresses).

There is a function in the  %Aquilegia editor %aquilegia_editor which can create this file or add automatically not listed images (without metadata) without modifying the existing images metadata.
In the editor, click [upload image] button which open the uploading page, then click button [update image list] (last button). You can then close the uploading page.

â– name
The name
(:date 21 Aug 2016 14:38:)Development name was 'MiniHelp'. Obviously not very original, I quickly found that a few web sites were already using this name. In search of something symbolising the small size, I first looked at small rodents, only to find that every rodent name is already used for at least one software. The small flower named 'Aquilegia' was unused (with this English name). So, this was decided.  Note that the French translation 'Ancolie' is already used for software. The photo is an "Aquilegia vulgaris https://en.wikipedia.org/wiki/Aquilegia". 

â– privacy
Privacy policy
(:date 21 Aug 2016 14:18:)The only information I retain from your visit will be the usual statistics kept by the web server provider tools:
Your IP, the web address used to enter the site (with the page if defined), the time you stay and your browser and OS characteristics (if they are not kept secret).
There is no commercial activity linked to this site and I do not search to identify or track you. The served content is entirely operated by myself and there is no publicity.
This presentation runs entirely in your browser and did not return any information to the server. There is no cookie. 
In addition, the whole presentation is technically an unique web page, as the content is dynamically changed based on what is in the global file  -- see the site to understand the storage philosophy--. So, I cannot know what page you did visit (except the syntax page, which is an independent file, so I can detect the loading).
As all my Internet operations, this is un-commissioned work that I develop as a hobby. 
In 15 years of Internet activity, I never displayed any publicity and so, never get any money, just expensed some... and thousands hours.
  Pierre Rouzeau  http://rouzeau.net

â– menu
help menu
(:date 21 Aug 2016 15:07:)(:notoc:)(:nodef:)(:notitle:)(:nodate:)
== General
"Demonstration http://otocoup.com/aql"
"Editor demo http://aquilegia.blue/edit"
%Installation%%
%Embedded servers%%

== Edition
%Aquilegia syntax%%
%Table examples%%
%Edition%%
%Aquilegia editor%%
%Writer advices%% 
%CSS file%css
%Tools%hlpdiag
%Images%%
%Images list%%

== Development
%Wiki markup%%
%Developer notes%%  
%Performance%Speed
%known problems%%
%Credits%%
==________________ 
%About%%

â– writer_tools
Writer tools
(:date 21 Aug 2016 14:18:)*Tool searching internal dead links and listing backlinks (referers) 
*Tool listing all external links 
*Tool searching dead image links and controlling the url length (for embedded servers with short link length limits)

All tools are in %this page%hlpdiag
Run the appropriate link then reload the page to run other tools.

â– speed
Aquilegia performance
(:date 21 Aug 2016 15:08:)
The wiki engine is fast and a page interpretation time may be below 50ms on the slowest devices. 
In principle, the help pages are only requested after the main application have started, so JQuery shall already be loaded.  Aquilegia size is low. The help file size (text) may be from 100 to 400kB , depending the documentation size. On an ordinary remote web server, this got compressed 'on the fly' so the data transmitted are approximately 40% of the original size. However, embedded servers may not compress the files, so speed may be slower locally if you get your files from an SD card. If get from chip memory as on the ESP8266, that will be fast.  

I have not done many tests, just basic evaluation. 
My desktop computer is based upon an i530 processor. My phone is an old Sony Xperia Neo -Yes, my daily phone-. Not very up to date equipment, but that is good for tests.

== The wiki engine
While it is using Regexes ("regular expressions https://en.wikipedia.org/wiki/Regular_expression") for wiki mark-up interpretation, it runs sufficiently fast for any present device, needing approximately 3ms for interpretation of an average page on a slow desktop computer and 30 ms on a slow mobile device. Not noticeable from user.
== The files 
The time to display pages is mostly the time needed to serve the site files, low for Aquilegia (65 ko not minified) and JQuery (70 ko), and more for the help file as the main help file shall be served in totality at first page opening. The independent pages are loaded on demand, but all pages are loaded when doing a search. The 4000 lines of the help file of the Duet uses 300 kB. There is an independent file for G-code using 100 kB. Note that wiki mark-up is more compact than html mark-up, so faster to transfer. Aquilegia presentation site is 17 pages, 800lines + 320 lines for syntax, total 80 kB with the syntax page. 

== Remote server
I experienced faster load from remote site than locally from SD card on the Duet server. That may be explained partly because a standard server compress the pages 'on the fly', while an embedded web server may not. On a basic server, if a site is growing, it may be useful to precompress files to be served, but that need some adaptation of the web server to have it sending appropriate headers, see links. 
Aquilegia may be installed on WiFi chips, so reducing the amount of transferred data may help on slow WiFi networks.
On Duet 0.6 with a slow SD card, help system without app takes 1000 ms to load, while it takes 400ms when loaded after the application (Bootstrap based). App + aquilegia (so, starting on an help page ) takes 1600ms to load.
On my web provider (OVH), the same web app plus Aquilegia takes 300ms to load, while the load of the help after application loading takes less than 100ms

â– embedded_servers
Embedded servers
(:date 5 Sep 2016 18:45:)(:notoc:)
== Duet web server
The Duet web server was designed on purpose for the Duet board and is fully integrated in the "RepRap Firmware  http://reprap.org/wiki/RepRap_Firmware". It also integrate a Telnet and FTP server. It is dedicated for the specific task of printing, so if you want to use the web server only, you will have to split it from the rest of the application. 
The most recent RepRap Firmware code fork is the one of DC42 , "On Github  https://github.com/dc42/RepRapFirmware/tree/dev/src/Duet" On the same fork, you also have the version running on the "ESP 8266 https://github.com/dc42/RepRapFirmware/tree/dev/src/DuetNG".
It shall be noted that the implementation on the ESP 8266 have some particularities, described in  %installation page%installation!extension_of_a_web_application.

==Other web servers
The  Library  "libmicrohttpd http://www.gnu.org/software/libmicrohttpd/" which have at the end of the page a list of other http servers libraries.

â– installation
Installation of Aquilegia
(:date 5 Sep 2016 18:49:)
=='Flat' mode
'Flat' Installation (without integration in a web application) is very simple, just copy the content of the www directory in your server web directory. html page is 'a.htm'
Test first on a local machine before installing it on a server. See %edition%%.
The html file shall be modified with author, title, etc. and you shall write your own content. A basic template for 'hlp'.txt' is supplied.
If installed on an apache server, you may create an .htaccess file redirecting to the 'a.htm' page, else name the page index.htm, this will allow direct connection without typing page name. 
If used as an autonomous application, it is advisable to create your own "favicon https://en.wikipedia.org/wiki/Favicon", which will be displayed on the user bookmark. You are free to use Aquilegia Favicon if you want. 
You may modify directories names in aql.js if you want.

==Extension of a web application
To install Aquilegia as an help of a web application, you shall indicate to Aquilegia what elements it shall close to display own element. This is simply done by defining the class 'mainapp' in the elements to be closed by Aquilegia for its own opening.
The html template of the Web Application is nearly identical to the 'flat' version, but you shall add a 'close' button, see the example template. It may be set at the end of your web application.
You shall also create one or more buttons calling Aquilegia, this is done by giving buttons the class 'hlpstart'. 
The Javascript is identical to the 'flat' version, Aquilegia know that is works aside a web application by detecting the 'mainapp' classes. 
Note that Aquilegia open as a full size window, as attempts to make Aquilegia a part size modal window were failing with mobile browser zoom.
Aquilegia need JQuery 2.2.1 or 3.1.0. 
Aquilegia need a function managing Text strings 'T()', see the file 'flat.js'. This function came from DWC where it handle translation, however string translation is not implemented in Aquilegia.
You also need to normalize css to homogeneize behaviour between browsers. If using Bootstrap framework, this normalisation is incorporated, else include the 'normalise.css' file from Necolas (supplied with Aquilegia distribution).
Note that if the web application is called with a deep link to an Aquilegia help page, the main application will be closed automatically and the requested Aquilegia help page will open directly. 
Have a look how Aquilegia is integrated in 'Duet Web Control'.
The Duet implementation on ESP8266 have a particularity, the local resources (textes and images) are on a SD card which is not directly accessible by http: protocol. All resources are called via Ajax calls with a specific syntax. So there are a few functions which are specific to this implementation, set in another javascript file 'aqlapp.js'. See the Duet Web Server fork for details. Aquilegia and application are in the memory attached to ESP8266.

==Cross origin data (for embedded web servers)
If you want to use cross-origin data (all resources will be taken from another resources site), you need to copy the whole content of 'h/' directory on the remote server and define the cross-origin domain in the ad-hoc variable in aql.js. The ressources will be called with 'http://remotesite.net/h/' As you call resources from another server, the content of 'h/' directory shall be open for other sites, according to CORS (cross-origin resources) principles. The '.htaccess' ditributed with Aquilegia in 'h/' directory may work for a standard apache server (open to the whole world), but sometimes this is a bit more difficult and you may want to restrict access, please see "enable cors http://enable-cors.org/", "awesome toast https://awesometoast.com/cors/" or "Zinoui http://zinoui.com/blog/cross-domain-ajax-request", which also tells how to restrict access to known origin.

==Other installation details
If you want to precompress your text of program files, have a look on "stack overflow http://stackoverflow.com/questions/16883241/how-to-host-static-content-pre-compressed-in-apache", "Codegrill http://blog.codegrill.org/2009/07/how-to-pre-compress-static-files-in.html" or "aptivate.org http://www.aptivate.org/webguidelines/Compression.html"

â– developer_notes
Aquilegia developer notes  Pierre ROUZEAU CC BY-SA
(:date 21 Aug 2016 15:09:)Autonomous Wiki markup based help system
Everything in this help module is Javascript/html, as this application is designed for web servers which does not have server-side language.

== Basic description
* An identification variable is used for selecting paragraphs, so the help can be auto-adaptive
* Most help pages are included in one file (hlp.txt), which is easier to manage by writer and ease linking
* Independant pages can be called, with file being mypage.txt (file name shall be lowercase, but link don't need be) but yet: they are not searched if they are not already loaded. They are not listed. 
* 'hlp.txt' file is loaded at first request, as loading a large file on one go is proved to be faster than multi-loading (tested).
* Text file is split in a hash table
* A table of content page "home" shall always be present in help file for proper operation
* As the help file is not user modifiable, there is no safety to prevent mark-up injection
* Manage latin accented letters 
* Manage images (jpg/png/svg) with html links to larger images or to pdf file (No javascript)
* Directories: /hlp/ for the text, hlp/thumb/ for displayed images, /hlp/full for linked images
  /hlp/pdf/ for linked pdf files, /js/ for javascript,  /css/ for css
* Help page is displayed in a modal dialogue box - not easy on mobile equipment
Any help page can be called either:
* from a button with the parameter 'data-hpage' containing the page name
* from html with  a href="javascript:window.showHlp('page');"

* Users newlines are respected by the wiki interpreter (with exceptions), which makes the newlines handling notably more complex than for other wikis.
There is an independent web page (convertwiki2.htm) to convert the syntax from mediawiki, cancel categories and templates. Not interpreting fully WikiMedia markup, text need manual intervention after conversion.

==Application test
It is very interesting to note that this app can be executed directly by Firefox locally, simply executing the 'a.htm' file, while for edge and chrome, you need to use a http server and access page with http://localhost:nnnn, using by example miniweb server (which works on Windows 10).
On Firefox, you may install Firebug for Javascript debugging, while on edge and Chrome, Firebug clones are pre-installed. Call debug window with [F12]. Note that Firebug will be abandoned due to Firefox engine modifications. 

==Wiki engine:
===Robustness
The main problem identified is that in some cases, notably malformed web addresses, the regular expressions can run away, and some browsers are not protected against that. As this is not meant to be a wiki publicly accessible and as publication will only be done after validation, that may not be a major problem. A good 'crash test' is the page 'aquilegia_syntax.txt' with preformatted markup removed.

===Interpretation strategy
The wiki engine is tokenising blocks, titles and web links, with are written back in text at the end of the interpretation. This have significantly improved performance. Hence, you **cannot** use links in titles, but this is not very good practice as links tend to be hidden by title formatting.

==Performance
You can have the last line of any page to indicates its own interpretation time and 'hlp.txt' loading time (or the last external page loading time) with (&#58;diag:) directive (set it in 'hlpdef' default page). 
see another page about %speed%%
=== Page interpretation
On a PC with an i530 processor, the page which is the longest to interpret now is the 'release notes' page, as the longest with many links. It takes 4 ms on FireFox. The same page on a tablet Samsung Galaxy note 2014 (GT N-8013) takes from 30 to 45 ms.
It is notable that for the link evaluation, the longest is for lines which does not have line breaks, so a small page could be much longer to evaluate than a long one if it does have one long uncut line.
=== Page(s) loading
Page load on the 3D printer (~240kB) takes from 500 to 700ms, this time varying by less than 10% for different SD card performance (firmware 1.13). Tested on my provider server, loading takes from 30 to 50ms.

=== Touchscreen device scrolling
With the possibility to "throw" a page on touchscreen device, the whole page is scrolled, while on desktop the header stay fixed.

== Evolution
As for now (August 2016), I consider this application have reached a relatively mature state and do not intend to add many functionalities. Time and users will tell if there are needs. For edition, I switched to the web editor as it is more practical than a computer editor and it proved to be quite stable.

== Perspectives
* Make search page used as template, like pmwiki ?
* Inserting standard icons in the text (with a sprite)
* Load (local only) a parameter file (Json ?) which may contain: Remote domain, language and other parameters
* Directive (:list:) to list all pages (may include 'external' pages) and (:nolist:) to exclude a page from the list.
* Have a look to add some robustness to the wiki engine
* Evaluate the possibility to precompress file and decompress in browser, with proper http headers or a library 
* The original program (in dojo) was supplying help bullets for icons, may be reinstalled, need location of icons

==History
Aquilegia originates from a project done in Dojo (Javascript browser side framework), which while working was never published.
For this web application (home electrical board design), I searched if there was a library available for a simple help system (< 30 pages), and did not found one.
So, being a happy user and contributor of pmwiki since nearly ten years, I thought the most simple to build a basic help system was to use a simple wiki. 
Some basic regular expression in Javascript for a very simple wiki were found on the Internet.
However, as for most latin keyboard users, typing '{}', '[]' and '|' is quite difficult (I am using a french keyboard),  as all these characters needs right alt key  (Alt.Gr), so large hand extension.
pmWiki markup is far easier than WikiMedia markup, however it still use brackets for links.
Worried of using wrongly designed markup for a decade, as this was an app where I will be the single user, I decided to implement my own markup, the very first one really adapted to all latin keyboard users (who, beside chinese users, are the majority of us).
So, I looked closely my keyboard (this in not an image, I actually looked at it) to find what shall be the best character for a markup. It ocurred me that the '%' char do have specific use which allow it to be reasonnably isolated from a general text. I based all links markup on this char. Other markups are more common, and the directive markup  (:directive  param:) is taken from pmwiki. 
I implemented it with some work, with the biggest difficulties related to Dojo library itself, and with very quirky css for printing.

I always thought to publish this help library as an independent one, for a more general use than Dojo. In this aim, I started some work which was never finished and ultimately lost in hard drive crash.

A few years later (in June 2016), working on 3D printer RepRapFirmware documentation, one day I thought that this can be the right tool to incorporate documentation in the firmware (which include a web server without server-side language). I decided to migrate from Dojo Framework to Bootstrap library, which is the library used by the RepRap Firmware web interface. 
The migration was relatively easy and fast (a bit more than half a day). Later, I removed all Bootstrap calls and stay to basic Jquery use.

However, while transferring the documentation text from the RepRap.org site (using MediaWiki), I found the need to somewhat expand my initially basic library.
So as usual, this have grown larger than initially purposed, but still remain simple and compact.

==Programming 'style'
This is a small one man project, by a hobbyist, so I follow a strategy which may be partly despised by some:
*I use relatively short variable names to limit line length and I feel that is better for readability.
*The code is very dense, which allow it to be in a unique file of less than 1000 lines. Working on a single Javascript file (but there are css files and the interpreted text file) speed development. This is non-commissioned work and I am not paid by the line or code size...
*For allocation with selecting variable, I use systematically the ternary operator a = (condition)? if_true : if_false ; . With practice and good spacing, I find it more readable and that improve the code compactness. I sometimes nest operators, which may not be good for readability.
*I use short-circuiting to check strings   a = (a||''); If a is valid, it remained unchanged, if undefined it will be replaced by an empty string. 
*Hash tables (associative arrays) are a very good structure, which often simplify code compared to flat arrays. I even used a two dimensions hash table to store the collapsed title section status. 

==Notes for developers
A few notes for other developers (as an amateur programmer).
===Dojo
Dojo is a quite complicated framework with steep learning curve, designed for web applications. It does have a lot of components and a complex API. Sometimes finding errors is quite difficult. It does have a huge quantity of events and parameters, all needing to refer to API documentation.
It is, in my opinion, not really accessible for amateur programmers like me. I choose it initially because it does have something quite unique, which is a complete library for vector graphic. This was before availability of HTML5 and was to date the only free framework capable to build vector graphic web app. 

===Bootstrap
Bootstrap, on the other hand, is mostly designed for web sites, not applications and is a coherent and simple ensemble. What really helps is that it is very popular, so information is widely accessible from the web, and referring to the original developer site is rarely needed. The site StackOverflow is by far the largest resource. 

===Regular expressions
Also available today (this was not the case during my initial development) are very good regular expression simulators, notably regex101.com and regexper.com. With this help, the test and understanding of regular expression was much easier and at the end, I think that nearly nothing from the original regular expression survived.
Testing with simulators, you shall not forget that regular expressions have some limitations in Javascript:
*No look behind, which cannot easily be replaced
*No 'U' parameter (ungreedy) : make individual sequences ungreedy
*No 's' parameter (single line)  use [\s\S] as 'catch all'; [^] also work but is Javascript only, so cannot be tested with online Regex simulators

===Javascript syntax
Searching the web for Javascript, two sites got generally in the top, Mozilla and W3Schools. W3SChools definitions are generally far less complete than Mozilla and rarely underlines the subtleness of the language. Mozilla site is notably better, with much more examples, but not always complete. 
It is sometimes delicate to have details on particular syntax. Look this very own program on string.replace with functions, the complete list of parameters is listed nowhere in common Javascript guides, while it is fundamental to know that what follow match is what is get by capturing parenthesis of the regular expression. 
Look also to 'short-circuiting' operators. 
Also, the results of 'match()' is very different for a simple test (with global match and what is captured by capturing parenthesis) and for a global (/g) research, where the result only gives you an array of the global matches. This is not explained properly in Mozilla site.  

===Jquery mobile
Jquery mobile is a different beast than Jquery, and propose functionalities which are not present in plain Jquery (nor Bootstrap). Beware when you read suggestions on sites that the solutions are not only available in Jquery mobile.

===Browser compatibility
As most new developments, I never had a look to the compatibility with Internet explorer. IE does represent "6% http://caniuse.com/#cats=CSS" of the market, most probably on businesses ageing machines, and will disappear soon. Most browser are now making automatic update, so when functionalities are added, they are very quickly diffused worldwide, letting browser without this update capability aside the road. Compared to the situation just few years ago, this is a huge improvement and a relief for developers.

I made basic colour schemes using css variables (custom properties). Two browsers don't implement them: Edge and Opera mini. Edge represent less than two percent of the market and opera mini five percent. The program will work perfectly out of the box on these browsers, the colours will only be limited to black and gray nuances. CSS variables is a functionality that a large number of developers have asked to Microsoft (this is on "their web site https://developer.microsoft.com/en-us/microsoft-edge/platform/status/cssvariables") to implement. If they don't want, why bother ? 

There is a remarkable site to know what functions are implemented on browsers (and give usage statistics), the site "Can I Use http://caniuse.com/"

==Rants
Developing is sometimes quite frustrating and it appear difficult to understand the logic of the people who standardize Javascript or html as utterly basic information may sometimes not be available.
Not sure that will be of any other use than venting my frustration but:
*Why there is "no simple way http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript" to know that we are on a touchscreen based device ?
*Why the user agent is not described in plain text and "is tricky to obtain https://whichbrowser.net" ?
*Why new url hash is still not set after hashchange event ? We shall practice divination ? 
*Some standard behaviour shall be decided when a regular expression run away. Using a timeout is not quite repeatable.
*Why the need to "normalize default CSS https://necolas.github.io/normalize.css/" values? This shall be part of the standard.
*Why no coherent Javascript zoom function on mobile? viewport behaviour differ for every browser. 
*Why no simple way to "http://stackoverflow.com/questions/15703625/get-screen-coordinates-of-dom-element know the position" of an element ? 
*Why no direct reading of image binary (need a "trick with canvas http://stackoverflow.com/questions/934012/get-image-data-in-javascript") ?
*Why "no standard http://stackoverflow.com/questions/5775469/whats-the-valid-way-to-include-an-image-with-no-src" for an empty image syntax ?
*css calculation syntax is really picky (spaces around operator, no space before parenthesis).
*css configuration for scrolling is really tricky, notably on mobile. Surprisingly, that was the most frustrating part of this development and I wasted way too hours on it and it work only with the help of Javascript (I had to intercept the anchor scroll).
*Scrolling to a location on textarea element did not work properly and what is used is a trick (cut the text at scrolled point, then read the bottom, and add again the removed part...)


==My toolbox
*Editor: Notepad++ 
*Javascript debugger: Chrome browser debugger
*PHP debugger (for the editor): none (Duh!)
*Minifier/compiler: Google closure compiler  
*FTP and file management: Total commander
*Development web server: Miniweb (no need for an AMP bundle here)
*Image viewer/manipulation: Irfanview
*Icon design and manipulation: Pixelformer and IconFx
*Schematics: Libre office draw
*OS: Windows 10
*Browser simulations: None free available

â– css
Aquilegia css structure
(:date 21 Aug 2016 15:01:)
Most stuff is in css/aql.css
the css directory also hold bullet icon and sprites.

<a href="css/aql.css">css/aql.css</a>

* %CSS classes of the Aquilegia layout%aquilegia_css_layout.png
* %CSS classes of tables%aquilegia_css_tables.png

There is yet three predefined color sets: black and white, pastel blue and pastel green.
On Opera mini, till implementation of CSS 'variables', if using the sets, user is stuck in black and white. However, having the variable list, hardcoding the colors in the css file body may be easy.

There are details of the sprite management in the file.

â– wiki_markup
Wiki markup
(:date 21 Aug 2016 14:18:)
== Wiki mark-up history
First Wiki was created in 1994, see "Wikipedia https://en.wikipedia.org/wiki/History_of_wikis"
It was based on Hypertext concepts dating back to the 1980's.
A first wiki mark-up was defined to ease the text creation with some basic presentation, links being based on WikiWords
Then, a lot of people created their own Wiki, with different mark-ups. 
Soon, WikiWords were considered inelegant and new wiki mark-ups were created for links.

Wikipedia was launched in 2001, with its own mark-up, its engine being called WikiMedia.

A lot of different mark-ups were created and no standard really emerged, while there was a more organised attempt for a basic mark-up with "Creole http://www.wikicreole.org/wiki/Creole1.0".
Another variant often used is 'Markdown'. Wikimedia mark-up, while the most known, is not frequently used outside its own engine, as it is one of the less practical.

In addition, most wikis are delivered with a very basic engine, with the possibility to add extensions. The extensions adds new commands, generally in the form of 'directives'. When the modules are created by independent volunteers, this aggravates the fragmentation.

There are anyway some commands which are frequently met in the different wiki dialects.
More than one hundred variants are listed by "WikiMatrix http://www.wikimatrix.org/statistics.php" 

== The problem
The main problem of all variants is they seems to have all been designed for English keyboards. 
On English keyboards, Brackets '[]' , braces '{}' and pipe '|' are in direct or 'shifted' access.
However, nearly all other keyboard types (except some Russian variant) have no direct access for these characters.
So, for the majority of people around the world, the right alt key, named [Alt Gr], shall be typed simultaneously with one letter to obtain a third character set. Unlike Shift key, this selector key is only available on the right of the keyboard and is generally accessed simultaneously with the other key with right hand, not using two hands, so this is a slow and tiring movement. This makes all the available Wiki dialects un-practical for most people. 
Programmers which are intensely using these characters find some help with program editors. Wiki authors did not have same help.
Not surprisingly, the language 'Python' which does not use braces to group commands have been created by an Italian programmer.

== My proposal
I have used a wiki named pmwiki for more than ten years, which have a mark-up set easier than Wikimedia, while still using brackets and pipes.
Having decided to create a small help system for a program I was designing, I had no legacy to handle for something which was mainly aimed to be a single user (me) wiki mark-up. 
So, I decided to create one more wiki dialect, adapted to my very own needs (which actually match the needs of the majority).
I began to look (actually) very closely my keyboard (French) and make a few decisions.
While designed for other keyboard than the English one, my whole set may fit well on it. 

And %here it is%aquilegia_syntax.
The biggest decision is to use '%' symbol for links and images, as a directly accessible character and due to very specific common use, easy to discriminate. The only limit associated with this choice is that a link text cannot end by a decimal.
It is difficult to escape to [Alt Gr] characters and this markup is using the symbol '#' for footnotes and numbered lists.  This is the only difficult to reach character of the whole syntax. 

=== Evaluating wiki mark-ups
* "WikiMatrix http://www.wikimatrix.org"
* Have a look at an evaluation of "table mark-up on Wikimedia https://meta.wikimedia.org/wiki/Wiki_markup_tables"

==Does wiki markup makes sense in 2016?
With more Wysiwyg editors available, wiki markup use is declining. However, coding markup is still widely used in forum for emoticons or character formatting, so remains common practice.
Using any markup need some learning, but allow much faster writing and text structuring than any mouse clicking editor. For an help system, with large text to be written, it does makes sense. Less alternating between keyboard and mouse is also a lot less tiring. This may help to reduce musculoskeletal problems. Automatic link research may be helpful, but is delicate to implement without integrated editor.

==Whose fault ? 
===Ethnocentrism
Most wikis were created by volunteers on non-commissioned work. When you are working for your own pleasure, you tend to work for yourself or for the environment you are familiar with, and rarely aim to fulfil very general needs (I am no exception). In that regard, commercial companies are more dedicated to target a general public, but wikis are relatively aside the commercial world.

===Conservatism
Even while creating new mark-up, programmers have a look on what exists, and change only a few sets which doesn't please them. So evolution is generally slow, if any.
Even my proposal, which part itself significantly from common wiki practice, still use common markup for the lists, character formatting or directives (similar to pmwiki). That also help user adaptation.

===Legacy
When you are targeting an existing audience (which was not really my case), you may want to give your users tools which they can be familiar with, so with limited differences with what they know. While typing this note (in Aquilegia mark-up), I catches myself typing brackets, as I am so familiar with them and also pmwiki title headers (!!, !!!, !!!!).

===Performance
Wiki mark-ups are old, and they were designed in times where available computer power was a few hundred times lower than nowadays, so in addition to be easy for the user, the syntax shall be simple to interpret by the wiki engine. Some mark-ups are very discriminant for a computer and so the engine use very low computing power to interpret them. The double brackets of the Wikimedia links or the triple brace of their directives are not nice for most authors, but they are very discriminant and can be interpreted quickly. Some wiki dialects are using a simple star aside group of words to select strong font. This is easy to type and visually very neat. However, distinguishing the simple star '*' mark-up from the time operator in calculation became much more difficult, if always possible. If not designed properly, a delicate markup interpretation may multiply evaluation time by tenths. For sites like Wikipedia, where millions pages are seen every day, served by resources which shall have minimal cost, this can be very critical.  

=== Robustness
Often (not always) Wiki engines are using a particular tool which is named 'regular expression' (RegEx). This is something which can perform complex transformation relatively efficiently and this is one of the basic tool which have contributed to Internet emergence by easing data exchange between different formats.
However, when not carefully designed (which is a delicate and mind-boggling task), regular expressions may sometimes loop many times (by the thousands) without finding a solution. Some programs shut down automatically after a given time (a time-out), but others may be indefinitely stuck (I have crashed the browser Chrome that way). Again, simplicity of interpretation by the computer is important.

===Programmer laziness/competence 
Writing a wiki interpreter is a very specific task, which is not that easy, particularly for amateurs like me.
Few programmers have the deep computer language knowledge that the author of pmWiki have (he is also working on Perl compiler). 
Also, complex programming may be difficult to maintain.
If the programmer is the one who decides the mark-up syntax, he/she may understandably want to help self to the task. That is why I had not retained the simple star mark-up for strong characters while as a user, I think it is the best. 

===Existing engines
My need was for a very basic wiki engine in Javascript. There are not many out there, the only autonomous engine I know being TiddlyWiki. Others are mix between different languages or are using Javascript on server side.
There was however some 'programmers exercises' at tiny engines :
"ParseWiki.js http://randomactsofcoding.blogspot.fr/2009/08/parsewikijs-javascript-wiki-parsing.html" at Random acts of coding, written in 2009. 
"WikiTohtml https://remysharp.com/2008/04/01/wiki-to-html-using-javascript" at Remy Sharp sites
"Wiky.js https://github.com/tanin47/wiky.js" 
"jscreole https://github.com/codeholic/jscreole" by Codeholic
I don't remember well(that was two year ago), but I think I started looking the last link, while my present code share nothing with it. 

â– writer_advices
Writer advices
(:date 21 Aug 2016 15:01:)
I am not a professional, but have created five web sites in nearly fifteen years. Not that many, but sufficient to gain some experience. The first is lost at sea but the others are still online. 
You can take my advices as they are worth, those of an experienced hobbyist, who always try to do quality work, but don't care much about fanciness. 
== Links, Links, Links
I wrote web technical documentation as a hobby  for around twelve years. I wrote two sites (in French) about hobby CNC (computer controlled machines), one after the other. First was  http://otocoup.com, a plain flat html site, then I used the wiki pmwiki for http://cncloisirs.com.  While CncLoisirs was initially reusing a big part of the content of Otocoup.com, its success and usability was immediate and much higher than its predecessor. The average depth of visit and time expensed on site by reader was three to four time better. A few reasons: shorter pages with good structure and a lot of interlinks between pages. You shall propose a new read at every corner, to capture interest of reader. Also, we all follow different intellectual paths depending our knowledge, experience and interest. User shall be free to follow own mind. So one of the key in documentation is links, links, links.  Aquilegia don't have categories, but there is %wiki trails%aquilegia_syntax!wiki_trails, where user can follow a path of **ordered** pages, as exists in a lot of wikis. This is user built, so the order can be more logical than automatically assembled categories. 

== Referers (backlinks)
Aquilegia propose a %basic tool%hlpdiag which list the pages with their referers (backlinks). This is very important, you shall target at the very minimum 3 links from other pages for each page of your documentation. However, applied on this very short presentation page set, it does not make a lot of sense. The same tool on the Duet documentation will be more explicit. To use it on your site, copy the page 'hlpdiag' as is. It call Aquilegia internal dedicated function. 

==Diagrams and schematics
 A serious weakness of my sites was the lack of schematics and somewhat insufficient iconography. Schematics needs a lot of work, but they can carry information much better than a few pages of explanations. Find a designer who have the mindset to transform concepts and technical structure in visual paths.
 
==File size
Use independant compressors for all images, as they generally perform better than general purpose image software. In your software, save preferably in lossless format or with the highest quality available, then use compressor to get the best compromise.
A big advantage of schematics and diagrams is their very low file size if properly recorded. This can be important on an embedded server with limited memory.  
For ".png" images, it is important to not resize schematics in a viewer tool but to export the images  at the resolution (dpi) which will be used in your site. A .png schematic exported directly at the given resolution may have a file size multiple times smaller than the same reduced by a viewer, due to anti aliasing perturbation. What is important here is the resolution, not the image size, you will crop the image after export if your design software don't allow it.
 
â– edition
Text edition
(:date 21 Aug 2016 15:01:)You have two options to edit Aquilegia help files:
*Develop locally on one machine and use a standard editor
*Use the %Aquilegia editor%% for shared edition, on a web server (which need php)
 
Editing locally have the advantage that you can use editor of choice and benefit from advanced functions of a modern editor.
Using the web server editor need some installation but you will benefit of the history tracking and the possibility to share editions with others and some dedicated helping commands.

== Local editor
For local edition, you shall organise a bit to ease your work and check quickly the result of your typing.
 
=== What editor to use
All editors can work on '.txt' files, so you choice will generally be on something already available on your machine. Nothing sophisticated is required, but you shall use a software with orthographic AND grammar correction. 
==== Visual aspect
By default, most editors open '.txt' documents in 'preformatted' style, which means they are using a fixed width font. This is hideous, so you may want to change that.
The processus may depend from your editor, but you may want to use your own template for model/style. You have to create a preformatted style with a non fixed width font, then record it in your own template. You may or may not set this template as your default.

==== Quick save
The second point is as you will swap between your browser and your editor to check the viewing, you want to save your file without being annoyed by a screen asking you confirmation of the file format. Often, on the saving window, you have to untick the saving option to not be asked every time the extension is not the default.

====Quick opening
Then, you shall choose on your operating system the editor which will open by default on '.txt' files.

===  How to proceed for edition
Open your browser on the help page you are editing. 
====Run directly in local
Firefox have the advantage that Aquilegia can be run directly as a file without any server, by clicking the 'a.htm' file. 
====Use a http server for local and remote test
Other browsers need the installation of a simple http server. I recommend "miniweb https://sourceforge.net/projects/miniweb/", which works on Windows 10. You may install it in your website directory and start from there (configure a batch for that). However, it don't start on the default 80 channel, but on channel 8000, so you may access your web page with http://localhost:8000 This also allow tests of other devices (mobiles) on your network, typically typing a local network address : http://192.168.0.12:8000
====Process
Typically the processus will be [Ctrl][S] to save your file, then swapping to your browser with [alt][Tab], reload the page on your browser with [ctrl][R] or [Alt][Ctrl][R] (Chrome), and you see the result of your edition. If you have closed all others windows than browser and editor, the whole process will need less than three seconds.
 
â– Aquilegia editor 
Aquilegia editor
(:date 21 Aug 2016 14:18:)Aquilegia editor is a separated web application for shared edition with history tracking of page files. It can upload images. It starts an independant session of Aquilegia when you ask a preview. It is installed in a directory '/edx' along other Aquilegia directories. It is using php and shall run on a standard web installation.

==Functionalities
600%editor.png
The Aquilegia editor is similar to what you can find on most Wikis, with some added functionalities:
*Quick jump on a page (by list) if you are editing 'hlp.txt' file
*Easy preview of the page under the cursor
*List of all pages to easily create page links
*List of all images with preview in tooltip to easily create image links - not yet list for sub-directories
*Search and replace function
*Jump to modified parts in history window.

==Demonstration
http://aquilegia.blue/edit This demonstration does not allow you to save anything but you can preview your work.

==Edition process
=== Access control
You can (shall) install a login/password control to the editor directory. Yet this is not directly part of aquilegia editor. This need an apache server and is done by a '.htpasswd' type file, along with '.htaccess' file configuration. The password file is renamed '.aqlpass' and there is an example in the distribution. You have an utility 'crypt.php' to get the real directory path (required) and crypt your password on your server, as crypting functions did not give same results on all servers.

===Browser
The editor works on Firefox and Edge, but on Chrome, there are difficulties on any large page. Deactivating the orthographic correction may help (on the contextual menu - mouse right click). This is a quite old Chrome bug and it is so recommended to use another browser.

===Concurrent editions 
Concurrent editions (multiple persons editing same file at the same moment) are detected but there is no proposal for the file differences. The history of the concurrent edition is available and one author can decide to supersede the concurrent edition with his/her own (if it is minor). As history of all editions are available, differences can be recovered later by copy/paste of the history text.

===Reverting an edition
There is not yet the possibility to automatically revert an edition (this is not a wiki and you are not supposed to be exposed to spammers), but if needed, you can get the whole/part text of any revision in the bottom windows of history view and paste it back in the editor./*beware of html entities*/

===Editing externally with FTP transfer
You can edit externally and copy your file on the server for others to check or comments.
While opening a page, the editor look to the last saved file and detect differences with the new pasted file and **store the differences in the history**. That can be useful if you are editing externally as it allow to track history if you update the server regularly. Note that the file history difference is stored **only** when you load the modified file in the Aquilegia editor.

==Images
480%editor_im.png
There is an utility for image uploading.
See the %dedicated page%images for image management.
 
== Preview
The preview button call Aquilegia to visualize the page where the cursor is located. Note that this trigger the anti-popup system of your browser and you shall allow popups for your development site.  

==Line ending
The application is designed to use LineFeed only character at line ends, so you may configure your editor for that (in Notepad ++, see [edit][EOL Conversion][Unix format] to change actual status). If not done, when pasting file on web site, your history will be full of end of line conversions (you can see that on the example...). 

== Saving a file
Just click the bottom button "save page". Note that you shall indicate the nature of the revision to be allowed to save. For large files, the saving process is not instant, but you can continue editing during the saving, so don't hesitate to save frequently. 
It occurs from time to time that saving fails. Just try again. Note that when you change page, there is no warning asking to save the current file.

== Safety and production site
When saving, the web editor create in /edx/hist directory a copy of former issue 'mypage.bak' and complete the 'mypage.dif' history file for each page it worked on.
This allow some recovery in case of big trouble. Deleting the ".dif" file does not cause harm, but you will loose all the history.
The editor directory 'edx' shall not be copied on the production site. All 'mypage.txt' files in /h directory contain whole published text. 
Files /h/aqlpreview.txt and /h/aquilegia_syntax.txt will not be used in production.

== Saving your server files
As any computer, a web server can crash or be compromised. If your provider don't do automatic saving, you may want to save your work from time to time. Save only the content of /h directory, which is the only one modified.

== Using the editor
*Open the editor with "http&#58;//yoursite.org/edx" and fill in name and password as required.
*Load an existing page while typing file name and clicking 'load' or hovering in the name field which will propose existing files links.
*List windows could be closed by clicking on them (outside a link area).
*To create a new page, just give it a name and save. Remember first line is page name (shall be identical to the file name for independent pages) and second line is page title.
*If you are in 'hlp.txt' file, there are multiple pages and you can jump to one by selecting it in the list opened by the button 'page list'. 
*You can insert an internal link by selecting a page in the list opened by the button "link" (Ctrl-L).
*You can insert an image by selecting one in the list opened by the button "Picture" (Ctrl-P). Hovering one list link will open an image preview tooltip.
*You can actually modify the cursor position when an insert link/image list is open. 
*Applying a style is done by selecting a text (double click for simple words) and clicking the style button.
*There is a "preview" button, which open Aquilegia in a separated window previewing the page under the cursor. Don't forget to save after you checked the preview.
*When creating a new site, it is wise to create all pages entries with title before writing content. That way, you will benefit from the page list to create links without any risk of spelling fault. Anyway, you still have a utility to check internal links (accessed by opening the page 'hlpdiag').

== history
You can see the history of any modification, including the modifications done externally to the editor. 
The history page have one main window highlighting differences (added parts in green, removed one in red). You have buttons which jump back and forth between the editions. Below this main window, you find two windows with native text (no highlighting) of the 'before' and 'after' update. You can copy the text from these windows to recover any information. 
 
== Editor installation
===How to proceed
* Find it "on Github https://github.com/PRouzeau/Aquilegia-Editor".
* Deploy the /edx directory on your Aquilegia server branch.
* Run crypt.php (preferably install it in another directory than /edx, as the access will be locked till configuration is finalised), this will give you the real path of your web install and crypted passwords.
* Adapt the '.htaccess' and '.aqlpass' file according crypt results
* Install the 'aquilegia_syntax.txt' in '/h' directory to have the help (will be removed in production server). 
* A working template of 'hlp.txt' shall exist (in '/h' directory) to have a preview.
By default, the editor work on text files in '../h/' directory and upload images in '../h/d' and '../h/f' directories (relative to own position).
The image upload page is independent from the editor.

=== Using Aquilegia editor locally
Install a "Wamp https://en.wikipedia.org/wiki/LAMP_(software_bundle)" or 'Lamp' distribution on your computer. These are heavy packages and you don't need the database, but there is no distribution without a database. This will install a pretty standard web distribution which could be configured like most remote servers. As always on Windows installation, you shall be very prudent with file names cases for your resources (notably images), as Windows don't differentiate character cases, but all other systems will do. Use the provided tool to insert links.

== Credits
Instead of the main viewer, this is not a completely original work and it reuse some components:
*"Fine diff http://www.raymondhill.net/finediff/viewdiff-ex.php" excellent PHP library from Raymond Hill for the history building
*"MarkItUp! http://markitup.jaysalvat.com/home/" simple Javascript editor from Jay Salvat with some modifications and addenda
*"This post http://www.htmlgoodies.com/html5/javascript/drag-files-into-the-browser-from-the-desktop-HTML5.html" for the image file drop box

â– images
Images in Aquilegia
(:date 22 Aug 2016 19:19:)
In principle, external images shall not be embedded in Aquilegia. This is anyway possible by directly writing html in pages, but not recommended.
The image management in any CMS (content management system) is critical. This is a long and tedious part. You need to organise yourself to limit time loss.

==Formats
Only 'png' and 'jpg' images format are accepted. svg is accepted by the markup, but some servers have troubles serving svg images, so it is recommended to not use this format. 'jpeg' extension is not allowed. Files name shall be lowercase.
The images represent a large size and also one of the largest time required for page display. It is important to properly define size of the stored image in accordance with the effective displayed size. Images shall be compressed by specialised compressors. As an average, the size gain is more than 40%. Png images are most of the time very poorly optimised by the software which produce them, and the size gain (lossless) of a good compressor can be up to 70%. 

== Directory structure
In Aquilegia,there are two directories for images:
* The 'display' directory (/h/d), where are stored all images displayed in a page.
* The 'full size' directory (/h/f), where are stored larger images seen when you click an image (if this is allowed).
For environment with space constraints, the 'full size' directory could be the same as the 'display', so this is the same image shown, but with different zoom.
Some images in '/h/d' linking to pdf files of without full size links need not be stored in 'full size' directory.
It is possible to have sub directories, provided the hierarchy is the same in both display and full size, say an image in /h/d/subdir will link to /h/f/subdir. Yet the sub directories are not completely managed in Aquilegia editor.

== Metadata
Metadata is the global information about the image, its author, copyright, instructions, source, etc. 
There are miscellaneous formats of metadata embedded in images. This is important as the information stay while a user download the image.
For jpg images, the most known metadata standards are EXIF (camera data) and IPTC (other data). PNG have own metadata format but unfortunately very few software allow its management or even transfer it while working the image. A new metadata format usable on most image formats (created by Adobe) was standardised under the name 'xmp' (extensible metadata platform). It have the advantage to be a unique format. However, it is not managed by common image managers. It is recommended to use "specialised editors https://en.wikipedia.org/wiki/Comparison_of_metadata_editors" to handle metadata. First you shall check if the compressors do respect the metadata to know when implement it.

== Presented metadata
The metadata presented by Aquilegia to the viewer is stored in a file named %imglist.txt%images_list. This list can be created automatically by %Aquilegia editor %aquilegia_editor with the image stored, but content details shall be filled manually. There are default values, which reduce the need of content writing if your source/license/description is common to most of your images. Yet there is no production of this metadata by extraction from the file, however I may develop later an extraction function for "jpeg IPTC https://en.wikipedia.org/wiki/IPTC_Information_Interchange_Model", but other formats are not easily manageable.
Note that the 'imglist.txt' file is only used to display metadata within the Aquilegia application. This information will not be transferred when a user download an image, so it is highly recommended to embed metadata in your images. With embedded metadata, users downloading images will be capable to retrieve all needed information once the files are on their computers. See "Wikipedia metadata editor comparison https://en.wikipedia.org/wiki/Comparison_of_metadata_editors". Note that while very few software manage it, there is a standard for embedded metadata in 'png' images.

== Batch processing
Using an image viewer which allow "batch https://en.wikipedia.org/wiki/Batch_processing" image conversions as "Irfanview http://www.wikihow.com/Batch-Convert-Images-Using-IrfanView" ("video https://www.youtube.com/watch?v=h49naM9aI-A") is very useful. Note that IrfanView can also 'batch' rename files. Use reasonably short file names.

== Using Aquilegia editor for uploads
600%upload_images.png
You can upload images with FTP or use the web interface to upload images to the server. 
It is better to resize and compress Images prior to uploading to have optimised size.
You have one button to upload to 'display' directory and another to 'full size' directory. There is no management of sub-directory yet.
A third button propose an automatic resizer which resize uploaded image to two predefined sizes sent respectively to display and full size directory, but this shall be only done in prototype phase:
*All embedded metadata is lost in the resize.
*The file size of the image is far from optimum. 
Compression is done in the browser. The png compression is poor and a good compressor (lossless) can reduce the size of the png images produced by the editor resizer by 65%. jpg benefit of a good compressor (lossy) can be 35 to 40% compared to the editor resizer.

â– known_problems
Known problems
(:date 21 Aug 2016 14:18:)*Zoom and scrolling on mobile is not perfect, but workable.
*Malformed web links can crash browser. Left in place for diagnostic of wrong links. 
*Some light servers don't cope well with svg files and they are not displayed. So yet it is recommended to avoid this format.
*Some light servers don't work properly with target="_blank" on same domain and download images instead of displaying them.

â– table_examples
Table examples
(:date 21 Aug 2016 14:18:)see %Aquilegia syntax%% 

<<
/:L Left floating table
=head left :::= cell joined after first column :: anything here won't be displayed
= head cent :: right align too large::left align :: right align::left 
= head right:: centered ::* center bold :: center :: right invisible
::
= head centered :: fxklmkmlk :: cjkvlhjknlm ::* boldboldbold :: *center* ::
:/ In the table, empty line collapse but you can prefix with '::' to join cells
>> 
/:L Left floating table
=head left :::= cell joined after first column :: anything here won't be displayed
= head cent :: right align too large::left align :: right align::left 
= head right:: centered ::* center bold :: center :: right invisible
::
= head centered :: fxklmkmlk :: cjkvlhjknlm ::* boldboldbold :: *center* ::
:/
In the table, empty line collapse but you can prefix with '::' to join cells
This text is just there to show that the table is floating.
(:clear:)  <<(:clear:) directive to separate below text from table >>
<<
altstrip is a predefined class to alternate color background
You can create own class and write css on demand. See the end of aql.css.
/:Raltstrip Table caption is centered by CSS rule	
::= full width comment :: anything here won't be displayed
= head:: 1rst line one color ::
= head:: 2nd line other color ::table row continue _
 :: on next line::4xxx
= head:: 3rd line swap color ::* vvdddddddddvvvvvv :: iiiiiiiiiiiiii ::
= header:: 4th swap color again :: cjkvlhjknlm ::* iiiiiiiigjhkbli :: ylÃ¹mlÃ¹* ::
:/ 
>>
/:Raltstrip Table caption is centered by CSS rule	
::= full width comment :: anything here won't be displayed
= head:: 1rst line one color ::
= head:: 2nd line other color ::table row continue _
 :: on next line::4xxx
= head:: 3rd line swap color ::* vvdddddddddvvvvvv :: iiiiiiiiiiiiii ::
= header:: 4th swap color again :: cjkvlhjknlm ::* iiiiiiiigjhkbli :: ylÃ¹mlÃ¹* ::
:/
This text is just there to show that the table is floating.
(:clear:)  <<(:clear:) directive to separate below text from table >>
<<
/:
un  :: deux ::trois
uno :: due ::tre
:/
>>
/:
un  :: deux ::trois
uno :: due ::tre
:/

â– about
About me and Aquilegia
(:date 21 Aug 2016 14:18:)Aquilegia Copyright Pierre Rouzeau 2016
Hobbyist programmer, manufacturer, designer, builder, etc.
For details about the motivations and history, have a look at %developer notes%%

â– hlpdiag
Writer tool box
(:date 21 Aug 2016 14:18:)<a href="javascript:hlpLoadAll(hlpListAll);">List all pages (after loading external pages)</a>

<a href="javascript:hlpLoadAll(hlpAllWeblnk);">List all web links (after loading external pages)</a> 
Links open in new window, so you can test one after the other while closing test window with [Ctrl]W.

<a href="javascript:hlpLoadAll(hlpAllImglnk);">Check linked images (after loading external pages)</a> 

















